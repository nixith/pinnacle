syntax = "proto2";

package pinnacle.layout.v0alpha1;

import "pinnacle/v0alpha1/pinnacle.proto";

// Love how the response is the request and the request is the response

message LayoutRequest {
  // A response to a layout request from the compositor.
  message Geometries {
    // The id of the request this layout response is responding to.
    //
    // Responding with a request_id that has already been responded to
    // or that doesn't exist will return an error.
    optional uint32 request_id = 1;
    // The output this request is responding to.
    optional string output_name = 2;
    // Target geometries of all windows being laid out.
    //
    // Responding with a different number of geometries than
    // requested windows will return an error.
    repeated .pinnacle.v0alpha1.Geometry geometries = 3;
  }
  // An explicit layout request.
  message ExplicitLayout {
    // NULLABLE
    //
    // Layout this output.
    //
    // If it is null, the focused output will be used.
    optional string output_name = 1;
  }

  oneof body {
    Geometries geometries = 1;
    ExplicitLayout layout = 2;
  }
}

// The compositor requested a layout.
//
// The client must respond with `LayoutRequest.geometries`.
message LayoutResponse {
  optional uint32 request_id = 1;
  optional string output_name = 2;
  repeated uint32 window_ids = 3;
  // Ids of all focused tags on the output.
  repeated uint32 tag_ids = 4;
  optional uint32 output_width = 5;
  optional uint32 output_height = 6;
}

service LayoutService {
  rpc Layout(stream LayoutRequest) returns (stream LayoutResponse);
}
